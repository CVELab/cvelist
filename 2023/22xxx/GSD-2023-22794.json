{
    "GSD": {
        "alias": "CVE-2023-22794",
        "id": "GSD-2023-22794",
        "references": [
            "https://www.suse.com/security/cve/CVE-2023-22794.html",
            "https://www.debian.org/security/2023/dsa-5372"
        ]
    },
    "gsd": {
        "osvSchema": {
            "schema_version": "1.4.0",
            "id": "GSD-2023-22794",
            "modified": "2023-01-18T00:00:00.000Z",
            "published": "2023-01-18T00:00:00.000Z",
            "aliases": [
                "CVE-2023-22794",
                "GHSA-hq7p-j377-6v63"
            ],
            "summary": "SQL Injection Vulnerability via ActiveRecord comments",
            "details": "There is a possible vulnerability in ActiveRecord related to the\nsanitization of comments. This vulnerability has been assigned the CVE\nidentifier CVE-2023-22794.\n\nVersions Affected: >= 6.0.0\nNot affected: < 6.0.0\nFixed Versions: 6.0.6.1, 6.1.7.1, 7.0.4.1\n\n# Impact\n\nPreviously the implementation of escaping for comments was insufficient for\n\nIf malicious user input is passed to either the annotate query method, the\noptimizer_hints query method, or through the QueryLogs interface which\nautomatically adds annotations, it may be sent to the database with\ninsufficient sanitization and be able to inject SQL outside of the comment.\n\nIn most cases these interfaces wonâ€™t be used with user input and users\nshould avoid doing so.\n\nExample vulnerable code:\n```\nPost.where(id: 1).annotate(\"#{params[:user_input]}\")\n\nPost.where(id: 1).optimizer_hints(\"#{params[:user_input]}\")\n```\n\nExample vulnerable QueryLogs configuration (the default configuration is not\nvulnerable):\n```\nconfig.active_record.query_log_tags = [\n  {\n    something: -> { <some value including user input> }\n  }\n]\n```\nAll users running an affected release should either upgrade or use one of the\nworkarounds immediately.\n\n# Workarounds\n\nAvoid passing user input to annotate and avoid using QueryLogs configuration\nwhich can include user input.",
            "severity": [
                {
                    "type": "CVSS_V3",
                    "score": 8.8
                }
            ],
            "affected": [
                {
                    "package": {
                        "ecosystem": "RubyGems",
                        "name": "activerecord",
                        "purl": "pkg:gem/activerecord"
                    }
                }
            ],
            "references": [
                {
                    "type": "WEB",
                    "url": "https://github.com/rails/rails/releases/tag/v7.0.4.1"
                },
                {
                    "type": "WEB",
                    "url": "https://github.com/rails/rails/commit/d7aba06953f9fa789c411676b941d20df8ef73de"
                }
            ]
        }
    },
    "namespaces": {
        "cve.org": {
            "CVE_data_meta": {
                "ASSIGNER": "support@hackerone.com",
                "ID": "CVE-2023-22794",
                "STATE": "PUBLIC"
            },
            "affects": {
                "vendor": {
                    "vendor_data": [
                        {
                            "product": {
                                "product_data": [
                                    {
                                        "product_name": "https://github.com/rails/rails",
                                        "version": {
                                            "version_data": [
                                                {
                                                    "version_value": "6.0.6.1, 6.1.7.1, 7.0.4.1"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "vendor_name": "n/a"
                        }
                    ]
                }
            },
            "data_format": "MITRE",
            "data_type": "CVE",
            "data_version": "4.0",
            "description": {
                "description_data": [
                    {
                        "lang": "eng",
                        "value": "A vulnerability in ActiveRecord <6.0.6.1, v6.1.7.1 and v7.0.4.1 related to the sanitization of comments. If malicious user input is passed to either the `annotate` query method, the `optimizer_hints` query method, or through the QueryLogs interface which automatically adds annotations, it may be sent to the database withinsufficient sanitization and be able to inject SQL outside of the comment."
                    }
                ]
            },
            "problemtype": {
                "problemtype_data": [
                    {
                        "description": [
                            {
                                "lang": "eng",
                                "value": "SQL Injection (CWE-89)"
                            }
                        ]
                    }
                ]
            },
            "references": {
                "reference_data": [
                    {
                        "name": "https://discuss.rubyonrails.org/t/cve-2023-22794-sql-injection-vulnerability-via-activerecord-comments/82117",
                        "refsource": "MISC",
                        "url": "https://discuss.rubyonrails.org/t/cve-2023-22794-sql-injection-vulnerability-via-activerecord-comments/82117"
                    },
                    {
                        "name": "DSA-5372",
                        "refsource": "DEBIAN",
                        "url": "https://www.debian.org/security/2023/dsa-5372"
                    }
                ]
            }
        },
        "nvd.nist.gov": {
            "configurations": {
                "CVE_data_version": "4.0",
                "nodes": [
                    {
                        "children": [],
                        "cpe_match": [
                            {
                                "cpe23Uri": "cpe:2.3:a:activerecord_project:activerecord:*:*:*:*:*:ruby:*:*",
                                "cpe_name": [],
                                "versionEndExcluding": "7.0.4.1",
                                "versionStartIncluding": "7.0.0",
                                "vulnerable": true
                            },
                            {
                                "cpe23Uri": "cpe:2.3:a:activerecord_project:activerecord:*:*:*:*:*:ruby:*:*",
                                "cpe_name": [],
                                "versionEndExcluding": "6.1.7.1",
                                "versionStartIncluding": "6.1.0",
                                "vulnerable": true
                            },
                            {
                                "cpe23Uri": "cpe:2.3:a:activerecord_project:activerecord:*:*:*:*:*:ruby:*:*",
                                "cpe_name": [],
                                "versionEndExcluding": "6.0.6.1",
                                "versionStartIncluding": "6.0.0",
                                "vulnerable": true
                            }
                        ],
                        "operator": "OR"
                    }
                ]
            },
            "cve": {
                "CVE_data_meta": {
                    "ASSIGNER": "cve-assignments@hackerone.com",
                    "ID": "CVE-2023-22794"
                },
                "data_format": "MITRE",
                "data_type": "CVE",
                "data_version": "4.0",
                "description": {
                    "description_data": [
                        {
                            "lang": "en",
                            "value": "A vulnerability in ActiveRecord <6.0.6.1, v6.1.7.1 and v7.0.4.1 related to the sanitization of comments. If malicious user input is passed to either the `annotate` query method, the `optimizer_hints` query method, or through the QueryLogs interface which automatically adds annotations, it may be sent to the database withinsufficient sanitization and be able to inject SQL outside of the comment."
                        }
                    ]
                },
                "problemtype": {
                    "problemtype_data": [
                        {
                            "description": [
                                {
                                    "lang": "en",
                                    "value": "CWE-89"
                                }
                            ]
                        }
                    ]
                },
                "references": {
                    "reference_data": [
                        {
                            "name": "https://discuss.rubyonrails.org/t/cve-2023-22794-sql-injection-vulnerability-via-activerecord-comments/82117",
                            "refsource": "MISC",
                            "tags": [
                                "Exploit",
                                "Patch",
                                "Vendor Advisory"
                            ],
                            "url": "https://discuss.rubyonrails.org/t/cve-2023-22794-sql-injection-vulnerability-via-activerecord-comments/82117"
                        },
                        {
                            "name": "DSA-5372",
                            "refsource": "DEBIAN",
                            "tags": [],
                            "url": "https://www.debian.org/security/2023/dsa-5372"
                        }
                    ]
                }
            },
            "impact": {
                "baseMetricV3": {
                    "cvssV3": {
                        "attackComplexity": "LOW",
                        "attackVector": "NETWORK",
                        "availabilityImpact": "HIGH",
                        "baseScore": 8.8,
                        "baseSeverity": "HIGH",
                        "confidentialityImpact": "HIGH",
                        "integrityImpact": "HIGH",
                        "privilegesRequired": "LOW",
                        "scope": "UNCHANGED",
                        "userInteraction": "NONE",
                        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
                        "version": "3.1"
                    },
                    "exploitabilityScore": 2.8,
                    "impactScore": 5.9
                }
            },
            "lastModifiedDate": "2023-03-14T08:15Z",
            "publishedDate": "2023-02-09T20:15Z"
        },
        "github.com/rubysec/ruby-advisory-db": {
            "gem": "activerecord",
            "cve": "2023-22794",
            "ghsa": "hq7p-j377-6v63",
            "url": "https://github.com/rails/rails/releases/tag/v7.0.4.1",
            "title": "SQL Injection Vulnerability via ActiveRecord comments",
            "date": "2023-01-18",
            "description": "There is a possible vulnerability in ActiveRecord related to the\nsanitization of comments. This vulnerability has been assigned the CVE\nidentifier CVE-2023-22794.\n\nVersions Affected: >= 6.0.0\nNot affected: < 6.0.0\nFixed Versions: 6.0.6.1, 6.1.7.1, 7.0.4.1\n\n# Impact\n\nPreviously the implementation of escaping for comments was insufficient for\n\nIf malicious user input is passed to either the annotate query method, the\noptimizer_hints query method, or through the QueryLogs interface which\nautomatically adds annotations, it may be sent to the database with\ninsufficient sanitization and be able to inject SQL outside of the comment.\n\nIn most cases these interfaces wonâ€™t be used with user input and users\nshould avoid doing so.\n\nExample vulnerable code:\n```\nPost.where(id: 1).annotate(\"#{params[:user_input]}\")\n\nPost.where(id: 1).optimizer_hints(\"#{params[:user_input]}\")\n```\n\nExample vulnerable QueryLogs configuration (the default configuration is not\nvulnerable):\n```\nconfig.active_record.query_log_tags = [\n  {\n    something: -> { <some value including user input> }\n  }\n]\n```\nAll users running an affected release should either upgrade or use one of the\nworkarounds immediately.\n\n# Workarounds\n\nAvoid passing user input to annotate and avoid using QueryLogs configuration\nwhich can include user input.",
            "cvss_v3": 8.8,
            "unaffected_versions": [
                "< 6.0.0"
            ],
            "patched_versions": [
                "~> 6.0.6, >= 6.0.6.1",
                "~> 6.1.7, >= 6.1.7.1",
                ">= 7.0.4.1"
            ],
            "related": {
                "url": [
                    "https://github.com/rails/rails/commit/d7aba06953f9fa789c411676b941d20df8ef73de"
                ]
            }
        }
    }
}
